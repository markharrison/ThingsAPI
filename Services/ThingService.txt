using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using ThingsAPI.Models;
using Azure.Data.Tables;
using Microsoft.AspNetCore.SignalR;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.AspNetCore.Http;

namespace ThingsAPI.Services
{
    public class ThingServiceX
    {
        private CloudTable _Thingstable { get; set; }

        private IConfiguration _config;

        public ThingService(IConfiguration config)
        {

            _config = config;

            var vCS = config.GetConnectionString("ThingsDbConnectionString");
            string tableName = "thingsdata";

            try
            {
                CloudStorageAccount storageAccount = CloudStorageAccount.Parse(vCS);
                CloudTableClient tableClient = storageAccount.CreateCloudTableClient(new TableClientConfiguration());
                CloudTable table = tableClient.GetTableReference(tableName);
                table.CreateIfNotExists();

                _Thingstable = table;
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
                throw;
            }

            return;
        }

        public async Task<IEnumerable<ThingItem>> GetAll()
        {
            List<ThingItem> _Things = new List<ThingItem>();

            try
            {
                TableQuery<ThingItemEntity> partitionScanQuery =
                    new TableQuery<ThingItemEntity>().Where(TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, "Thing"));
                TableContinuationToken token = null;

                do
                {
                    TableQuerySegment<ThingItemEntity> segment = await _Thingstable.ExecuteQuerySegmentedAsync(partitionScanQuery, token);
                    token = segment.ContinuationToken;
                    foreach (ThingItemEntity entity in segment)
                    {
                        ThingItem _Thing = new ThingItem
                        {
                            Thingid = entity.Thingid,
                            Name = entity.Name,
                            Longitude = entity.Longitude,
                            Latitude = entity.Latitude,
                            Text = entity.Text,
                            Status = entity.Status,
                            Image = entity.Image,
                            Data = entity.Data
                        };

                        _Things.Add(_Thing);
                    }
                }
                while (token != null);

            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
                throw;
            }

            return _Things;
        }

        public async Task<ThingItem> FindByNameLocation(ThingItem Thing)
        {
            if (Thing.Latitude == null || Thing.Longitude == null || Thing.Name == null)
            {
                return null;
            }

            try
            {
                string filter = "PartitionKey eq 'Thing' and Name eq '" + Thing.Name + "' ";

                TableQuery<ThingItemEntity> query = new TableQuery<ThingItemEntity>().Where(filter);
                TableContinuationToken token = null;
                do
                {
                    TableQuerySegment<ThingItemEntity> segment = await _Thingstable.ExecuteQuerySegmentedAsync(query, token);
                    foreach (ThingItemEntity entity in segment)
                    {
                        decimal deltaLongitude = Math.Abs((decimal)entity.Longitude - (decimal)Thing.Longitude);
                        decimal deltaLatitude = Math.Abs((decimal)entity.Latitude - (decimal)Thing.Latitude);

                        if (deltaLongitude < 0.00015m && deltaLatitude < 0.00015m)
                        {
                            ThingItem _Thing = new ThingItem
                            {
                                Thingid = entity.Thingid,
                                Name = entity.Name,
                                Longitude = entity.Longitude,
                                Latitude = entity.Latitude,
                                Text = entity.Text,
                                Status = entity.Status,
                                Image = entity.Image,
                                Data = entity.Data
                            };
                            return _Thing;
                        }

                    }
                }
                while (token != null);

            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
                throw;
            }

            return null;
        }



        public async Task<ThingItem> FindById(string id)
        {

            TableOperation retrieveOperation = TableOperation.Retrieve<ThingItemEntity>("Thing", id.PadLeft(4, '0'));
            TableResult retrievedResult = await _Thingstable.ExecuteAsync(retrieveOperation);
            if (retrievedResult.Result == null)
            {
                return null;
            }

            ThingItemEntity entity = (ThingItemEntity)retrievedResult.Result;

            ThingItem _Thing = new ThingItem
            {
                Thingid = entity.Thingid,
                Name = entity.Name,
                Longitude = entity.Longitude,
                Latitude = entity.Latitude,
                Text = entity.Text,
                Status = entity.Status,
                Image = entity.Image,
                Data = entity.Data
            };

            return _Thing;
        }

        public async Task UpdateById(string id, ThingItem Thing)
        {

            ThingItemEntity entity = new ThingItemEntity(id.PadLeft(4, '0'))
            {
                Thingid = Convert.ToInt64(id),
                Name = Thing.Name,
                Longitude = (double)Thing.Longitude,
                Latitude = (double)Thing.Latitude,
                Text = Thing.Text,
                Status = Thing.Status,
                Image = Thing.Image,
                Data = Thing.Data
            };

            try
            {
                TableOperation insertOrMergeOperation = TableOperation.InsertOrMerge(entity);
                TableResult result = await _Thingstable.ExecuteAsync(insertOrMergeOperation);
                TableEntity insertedRecord = result.Result as TableEntity;

            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
                throw;
            }

            return;
        }

        public async Task DeleteById(string id)
        {
            ThingItemEntity entity = new ThingItemEntity(id.PadLeft(4, '0'))
            {
                ETag = "*"
            };

            try
            {
                TableOperation deleteOperation = TableOperation.Delete(entity);
                TableResult retrievedResult = await _Thingstable.ExecuteAsync(deleteOperation);
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
                throw;
            }

            return;
        }

        public async Task DeleteAll()
        {
            await Task.Run(() => { });

            TableBatchOperation batchDeleteOperation = null;
            int iBatchCount;

            void resetbatch()
            {
                batchDeleteOperation = new TableBatchOperation();
                iBatchCount = 0;
            }

            async Task flushbatch()
            {
                await _Thingstable.ExecuteBatchAsync(batchDeleteOperation);
                batchDeleteOperation = null;
                resetbatch();
            }

            async Task addBatch(ThingItemEntity row)
            {
                batchDeleteOperation.Delete(row);
                iBatchCount++;
                if (iBatchCount == 100)
                {
                    await flushbatch();
                }

            }


            try
            {
                TableQuery<ThingItemEntity> query = new TableQuery<ThingItemEntity>().Where(TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, "Thing"));
                var result = await _Thingstable.ExecuteQuerySegmentedAsync(query, null);

                resetbatch();
                foreach (var row in result)
                {
                    await addBatch(row);
                }

                if (iBatchCount > 0)
                {
                    await flushbatch();
                }


            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
                throw;
            }

            return;
        }


        public string GetAppConfigInfo(HttpContext context) {

            string pw = context.Request.Query["pw"].ToString();


            string strAppConfigInfoHtml = "";
            strAppConfigInfoHtml += "<html><head>";
            strAppConfigInfoHtml += "<style>";
            strAppConfigInfoHtml += "body { font-family: \"Segoe UI\",Roboto,\"Helvetica Neue\",Arial;}";
            strAppConfigInfoHtml += "</style>";
            strAppConfigInfoHtml += "</head><body>";
            strAppConfigInfoHtml += "<h3>ThingsAPI - AppConfigInfo </h3>";
            strAppConfigInfoHtml += "OS Description:  " + System.Runtime.InteropServices.RuntimeInformation.OSDescription + "<br/>";
            strAppConfigInfoHtml += "Framework Description:  " + System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription + "<br/>";
            strAppConfigInfoHtml += "BuildIdentifier:  " + _config.GetValue<string>("BuildIdentifier") + "<br/>";
            if (_config.GetValue<string>("AdminPW") == context.Request.Query["pw"].ToString() )
            {
                strAppConfigInfoHtml += "ASPNETCORE_ENVIRONMENT:  " + _config.GetValue<string>("ASPNETCORE_ENVIRONMENT") + "<br/>";
                strAppConfigInfoHtml += "ApplicationInsights ConnectionString:  " + _config.GetValue<string>("ApplicationInsights:ConnectionString") + "<br/>";
                strAppConfigInfoHtml += "Datastore ConnectionString:  " + _config.GetConnectionString("ThingsDbConnectionString") + "<br/>";
            }

            strAppConfigInfoHtml += "<hr/>";
            strAppConfigInfoHtml += "<a href='/'>Home</a>" + "<br/>";
            strAppConfigInfoHtml += "</body></html>";

            return strAppConfigInfoHtml;
        }
    }
}
